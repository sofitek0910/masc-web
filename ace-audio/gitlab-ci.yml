# Caches
.node_modules-cache: &node_modules-cache
  key:
    files:
      - yarn.lock
  paths:
    - node_modules
  policy: pull

.yarn-cache: &yarn-cache
  key: yarn-$CI_JOB_IMAGE
  paths:
    - .yarn

.test-cache: &test-cache
  key: test-$CI_JOB_IMAGE
  paths:
    - .jestcache
  policy: pull-push

.build-cache: &build-cache
  key: build-$CI_JOB_IMAGE
  paths:
      - .cache
      - public
  policy: pull-push

# Jobs
Install Dependencies:
  stage: install_deps
  script:
    - yarn install --cache-folder .yarn
  cache:
    - <<: *node_modules-cache
      policy: pull-push # We override the policy
    - <<: *yarn-cache # This is not required if your internet speed is good or if you use a local npm registry. 

Test:
  stage: test
  script:
    - yarn test --cacheDirectory ".jestcache"
  cache:
    - <<: *node_modules-cache
    - <<: *test-cache

Build:
  stage: build
  script:
    - yarn build
  cache:
    - <<: *node_modules-cache
    - <<: *build-cache
  artifacts:
    paths:
      - public

Docker Build:
  before_script:
    # to skip default before_script
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  stage: package
  cache: {}
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker pull ${CI_REGISTRY_IMAGE}/gprg:latest || true
    - docker build
      --cache-from ${CI_REGISTRY_IMAGE}/gprg:latest
      -t ${CI_REGISTRY_IMAGE}/gprg:prod
      -t ${CI_REGISTRY_IMAGE}/gprg:latest .
    - docker push ${CI_REGISTRY_IMAGE}/gprg